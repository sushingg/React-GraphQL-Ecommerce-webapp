{"version":3,"sources":["components/Products/Products.js"],"names":["Product","React","lazy","Promise","resolve","then","__webpack_require__","bind","Products","react__WEBPACK_IMPORTED_MODULE_1___default","a","createElement","semantic_ui_react__WEBPACK_IMPORTED_MODULE_4__","textAlign","Column","largeScreen","mobile","semantic_ui_react__WEBPACK_IMPORTED_MODULE_5__","Group","itemsPerRow","stackable","react_apollo__WEBPACK_IMPORTED_MODULE_2__","query","gql","_templateObject","pollInterval","_ref","loading","error","data","semantic_ui_react__WEBPACK_IMPORTED_MODULE_6__","Header","message","products","product","map","currentProduct","i","key"],"mappings":"gnBAIA,IAAMA,EAAUC,IAAMC,KAAK,kBAAMC,QAAAC,UAAAC,KAAAC,EAAAC,KAAA,aA4ClBC,UA1CE,kBACfC,EAAAC,EAAAC,cAACC,EAAA,EAAD,CAAMC,UAAU,UACdJ,EAAAC,EAAAC,cAACC,EAAA,EAAKE,OAAN,CAAaC,YAAa,GAAIC,OAAQ,IACpCP,EAAAC,EAAAC,cAACM,EAAA,EAAKC,MAAN,CAAYC,YAAa,EAAGC,WAAS,GACnCX,EAAAC,EAAAC,cAACU,EAAA,EAAD,CACEC,MAAOC,IAAFC,KAiBLC,aAAc,KAEb,SAAAC,GAA8B,IAA3BC,EAA2BD,EAA3BC,QAASC,EAAkBF,EAAlBE,MAAOC,EAAWH,EAAXG,KAClB,OAAIF,EAAgBlB,EAAAC,EAAAC,cAAA,wBAChBiB,EAEAnB,EAAAC,EAAAC,cAACmB,EAAA,EAAD,KACErB,EAAAC,EAAAC,cAACmB,EAAA,EAAQC,OAAT,cACAtB,EAAAC,EAAAC,cAAA,SAAIiB,EAAMI,UAGTH,EAAKI,SAASC,QAAQC,IAAI,SAACC,EAAgBC,GAAjB,OAC/B5B,EAAAC,EAAAC,cAACX,EAAD,CAASsC,IAAKD,EAAGH,QAASE","file":"static/js/4.bc436e49.chunk.js","sourcesContent":["import React from \"react\";\r\nimport { Query } from \"react-apollo\";\r\nimport gql from \"graphql-tag\";\r\nimport { Card, Message, Grid} from \"semantic-ui-react\";\r\nconst Product = React.lazy(() => import(\"./Product\"));\r\n\r\nconst Products = () => (\r\n  <Grid textAlign=\"center\">\r\n    <Grid.Column largeScreen={16} mobile={13}>\r\n      <Card.Group itemsPerRow={4} stackable>\r\n        <Query\r\n          query={gql`\r\n            {\r\n              products(limit: 12) {\r\n                product {\r\n                  slug\r\n                  title\r\n                  price\r\n                  description\r\n                  quantity\r\n                  image {\r\n                    altText\r\n                    name\r\n                  }\r\n                }\r\n              }\r\n            }\r\n          `}\r\n          pollInterval={20000}\r\n        >\r\n          {({ loading, error, data }) => {\r\n            if (loading) return <div>Loading..</div>;\r\n            if (error)\r\n              return (\r\n                <Message>\r\n                  <Message.Header>Error</Message.Header>\r\n                  <p>{error.message}</p>\r\n                </Message>\r\n              );\r\n            return data.products.product.map((currentProduct, i) => (\r\n              <Product key={i} product={currentProduct} />\r\n            ));\r\n          }}\r\n        </Query>\r\n      </Card.Group>\r\n    </Grid.Column>\r\n  </Grid>\r\n);\r\nexport default Products;\r\n"],"sourceRoot":""}